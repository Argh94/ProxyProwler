name: ProxyProwler

on:
  workflow_dispatch:

jobs:
  scrape-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        proxy_type: [SOCKS5, SOCKS4, HTTPS]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create or update requirements.txt
        working-directory: ./Files
        run: |
          echo -e "requests\npytz\njdatetime" > requirements.txt

      - name: Install dependencies
        working-directory: ./Files
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create temporary proxies directory
        run: mkdir -p /tmp/proxies

      - name: Run scraper for ${{ matrix.proxy_type }}
        working-directory: ./Files
        run: python proxy_scraper.py ${{ matrix.proxy_type }}
        env:
          OUTPUT_DIR: /tmp/proxies

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: proxy-files-${{ matrix.proxy_type }}
          path: |
            /tmp/proxies/${{ matrix.proxy_type }}.txt
            Files/requirements.txt
        continue-on-error: true

  finalize:
    runs-on: ubuntu-latest
    needs: scrape-and-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to temporary directory
        run: |
          mkdir -p /tmp/proxies
          for artifact in artifacts/proxy-files-*/*.txt; do
            if [ -f "$artifact" ]; then
              mv "$artifact" /tmp/proxies/
            fi
          done
          if [ -f "artifacts/proxy-files-*/requirements.txt" ]; then
            mv artifacts/proxy-files-*/requirements.txt /tmp/proxies/requirements.txt
          else
            echo -e "requests\npytz\njdatetime" > /tmp/proxies/requirements.txt
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies for README update
        run: |
          python -m pip install --upgrade pip
          if [ -f "/tmp/proxies/requirements.txt" ]; then
            pip install -r /tmp/proxies/requirements.txt
          else
            pip install requests pytz jdatetime
          fi

      - name: Run scraper to update README
        run: python Files/proxy_scraper.py
        env:
          OUTPUT_DIR: /tmp/proxies

      - name: Check README creation
        run: |
          if [ -f "README.md" ]; then
            echo "README.md created successfully"
          else
            echo "Error: README.md not found"
            exit 1
          fi

      - name: Get Current Date and Time
        id: date
        run: echo "CURRENT_DATE=$(TZ='Asia/Tehran' date '+%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: "ProxyProwler Update - ${{ steps.date.outputs.CURRENT_DATE }}"
          body: "Automated update with active proxies at ${{ steps.date.outputs.CURRENT_DATE }} (IRST)"
          draft: false
          prerelease: false
          files: |
            /tmp/proxies/SOCKS5.txt
            /tmp/proxies/SOCKS4.txt
            /tmp/proxies/HTTPS.txt
            /tmp/proxies/requirements.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push README changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add README.md
          git commit -m "♻️ ProxyProwler Update - ${{ steps.date.outputs.CURRENT_DATE }}" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
